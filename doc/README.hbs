object-template
===============

[![npm](https://img.shields.io/npm/v/object-template.svg?style=flat-square)](https://npmjs.com/package/object-template)
[![npm license](https://img.shields.io/npm/l/object-template.svg?style=flat-square)](https://npmjs.com/package/object-template)
[![npm downloads](https://img.shields.io/npm/dm/object-template.svg?style=flat-square)](https://npmjs.com/package/object-template)
[![travis](https://img.shields.io/travis/resin-io-modules/object-template/master.svg?style=flat-square&label=linux)](https://travis-ci.org/resin-io-modules/object-template)

> Bidirectional JSON-based templating engine

Installation
------------

Install `object-template` by running:

```sh
npm install --save object-template
```

Documentation
-------------

`object-template` is a templating engine that operates on JSON objects,
providing the unique benefit of allowing bidirectional transformations, that
is, from template and data to a result, and from a template and result to the
original data.

For example, consider the following template:

```json
{
  "foo": "My name is \{{name}}"
}
```

Notice the use of double curly braces to denote string interpolation.

In order to compile this template, we need a `name` value. This is an example
data object that can be used to compile the above template:

```json
{
  "name": "John Doe"
}
```

The compilation result looks like this:

```json
{
  "foo": "My name is John Doe"
}
```

Now consider that we have the compilation result and the template, and we want
to be able to determine what was the original data used to compile it.

`object-template` will realise `"My name is John Doe"` was compiled from `"My
name is \{{name}}"`, and therefore that `name` equals `John Doe`. Using this
information, `object-template` will "decompile" the template and return back
the following object to the user, which unsurprisingly equals the "data"
object:

```json
{
  "name": "John Doe"
}
```

The example objects contain one key and a single interpolation, but on real
templates, there can be complex nesting levels and multiple interpolations
(even many per property).

Default values
--------------

Default values can be provided using the `||` operator. The default value should be JSON encoded.
In the example below, if the `name` value is not provided, the default value
`John Doe` will be used instead.

```json
{
  "foo": "My name is \{{name || \"John Doe\"}}"
}

```

When decompiling a result that used a default value, the default value will be returned.

API
---

{{#module name="object-template"}}
{{>body~}}
{{>member-index~}}
{{>separator~}}
{{>members~}}
{{/module}}

Tests
-----

Run the `test` npm script:

```sh
npm test
```

Contribute
----------

- Issue Tracker: [github.com/resin-io-modules/object-template/issues](https://github.com/resin-io-modules/object-template/issues)
- Source Code: [github.com/resin-io-modules/object-template](https://github.com/resin-io-modules/object-template)

Before submitting a PR, please make sure that you include tests, and that the
linter runs without any warning:

```sh
npm run lint
```

Support
-------

If you're having any problem, please [raise an issue][newissue] on GitHub.

License
-------

This project is free software, and may be redistributed under the terms
specified in the [license].

[newissue]: https://github.com/resin-io-modules/object-template/issues/new
[license]: https://github.com/resin-io-modules/object-template/blob/master/LICENSE
